Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії



ЗВІТ
до лабораторної роботи № 5
з дисципліни
"Аналіз та рефакторинг коду"
на тему: " РОЗГОРТАННЯ ПРОГРАМНОЇ СИСТЕМИ ТА ДЕМОНСТРАЦІЯ ЇЇ РОБОТИ"




Виконала ст. гр ПЗПІ-22-1
Петренко Марія Олександрівна

    Перевірив
    ст. викладач кафедри ПІ
    Сокорчук Ігор Петрович







Харків 2024
1 МЕТА
     Розгорнути програмну систему та продемонструвати її.
2 ЗАВДАННЯ
- Розгорнути реалізовану програмну систему.
- Перевірити та налаштувати роботу розгорнутої програмної системи.
3 ХІД РОБОТИ
     Для розгортання програмної системи було написано скрипт на мові програмування Python. Він встановлює необхідні для роботи програми залежності, а також створює базу даних, заповнює її даними з резервної копії та змінює рядок підключення до бази даних. Весь програмний код наведено в додатку А.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
ВИСНОВКИ
     В ході виконання цієї лабораторної роботи було розгорнуто програмну систему та продемонстровано її роботу. Відео із захистом завантажено за посиланням: https://youtu.be/3SChBn1LT8w.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
ДОДАТОК А
Програмний код для розгортання системи
1 # -*- coding: utf-8 -*-
2 
3 import subprocess
4 import getpass
5 import os
6 import json
7 
8 #Функція для встановлення Chocolatey
9 def install_chocolatey():
10     print("Starting setup of the Chocolatey package manager.")
11     installation_string = (
12          "powershell -NoProfile -InputFormat None -ExecutionPolicy Bypass -Command "
13          "iex ((New-Object System.Net.WebClient).DownloadString('https://chocolatey.org/install.ps1'));"
14     )
15 
16     try:
17         subprocess.run(installation_string, shell=True, check=True)
18         print("Chocolatey is installed.")
19     except subprocess.CalledProcessError as e:
20         print("Error installing the Chocolatey package manager.")
21 
22 #Функція для встановлення .NET 8.0
23 def install_dotnet():
24     print("You don't have .NET installed.")
25     print("Starting installation.")
26     try:
27        subprocess.run(["choco", "install", "dotnet-8.0-sdk", "-y"], check=True)
28        print(".NET 8 is installed.")
29     except subprocess.CalledProcessError as e:
30        print("Error installing .NET 8.")
31 
32 #Функція для встановлення SQL Server
33 def install_sql_server():
34     print("You don't have MS SQL Server installed.")
35     print("Starting installation.")
36     try:
37         subprocess.run(["choco", "install", "sql-server", "-y"], check=True)
38         print("SQL Server is installed.")
39     except subprocess.CalledProcessError as e:
40         print("Error installing SQL Server")
41 
42 #Функція для налаштування бази даних
43 def db_setup(server, username, password, db_name):
44     print("Looking for backup file")
45     backup_path = os.path.abspath(os.path.join("Migrations", "FarmKeeperDatabaseBackup.bak"))
46     if not os.path.isfile(backup_path):
47         print(f"Backup file '{backup_path}' not found.")
48         return
49     else:
50         print("Backup file found successfully.")
51 
52     print("Looking for database")
53 
54     check_db_command = f"""
55     sqlcmd -S {server} -U {username} -P {password} -Q "SELECT name FROM sys.databases WHERE name = '{db_name}'"
56     """
57     check_result = subprocess.run(check_db_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
58 
59     if db_name in check_result.stdout:
60         print(f"'{db_name}' database already exists.")
61     else:
62         print(f"'{db_name}' database was not found. Creating database.")
63         create_db_command = f"""
64             sqlcmd -S {server} -U {username} -P {password} -Q "CREATE DATABASE {db_name}"
65             """
66         create_result = subprocess.run(create_db_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
67         if create_result.returncode == 0:
68             print(f"'{db_name}' database created successfully.")
69         else:
70             print(f"Error creating database: {create_result.stderr.strip()}")
71             return
72         
73         print("Restoring database from the backup file")
74         restore_db_command = ( "sqlcmd -S " + server + " -U " + username + " -P " + password + " "
75              "-Q \"ALTER DATABASE " + db_name + " SET SINGLE_USER WITH ROLLBACK IMMEDIATE; "
76              "RESTORE DATABASE " + db_name + " FROM DISK = '" + backup_path + "' "
77              "WITH MOVE 'FarmKeeperDb' TO 'C:\\Program Files\\Microsoft SQL Server\\MSSQL16.MSSQLSERVER\\MSSQL\\DATA\\" + db_name + ".mdf', "
78              "MOVE 'FarmKeeperDb_log' TO 'C:\\Program Files\\Microsoft SQL Server\\MSSQL16.MSSQLSERVER\\MSSQL\\DATA\\" + db_name + "_log.ldf', "
79              "REPLACE\"" )
80         restore_result = subprocess.run(restore_db_command, shell=True, stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
81         if restore_result.returncode == 0:
82             print("Data base successfully restored from the backup file.")
83         else:
84             print("Error restoring the data base from the backup file.")
85 
86 #Функція для зміни рядка підключення
87 def change_connect_string(server, username, password, db_name):
88     current_directory = os.getcwd()
89     appsettings_path = os.path.join(current_directory, 'appsettings.json')
90     if os.path.exists(appsettings_path):
91         print(f"File appsettings.json was found.")
92         try:
93             with open(appsettings_path, "r") as file:
94                 data = json.load(file)
95 
96             connection_string = (
97                 f"Server={server};Database={db_name};User Id={username};Password={password};"
98                 "Encrypt=True;TrustServerCertificate=True"
99             )
100             data['ConnectionStrings']['FarmKeeperConnectionString'] = connection_string
101 
102             with open(appsettings_path, "w") as file:
103                 json.dump(data, file, indent=4)
104             print("Connection string updated successfully.")
105         except Exception as e:
106             print(f"Error updating connection string: {e}")
107     else:
108         print(f"File appsettings.json was not found.")
109 
110 def main():
111     print("Starting setup of the program")
112     #Перевірка чи встановлений менеджер пакетів Chocolatey на пристрої
113     try:
114         subprocess.run(["choco", "-v"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
115         print("The Chocolatey package manager was found.")
116     except FileNotFoundError:
117         install_chocolatey()
118 
119     #Перевірка чи встановлений .NET
120     try:
121         subprocess.run(["dotnet", "--version"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
122         print(".NET was found.")
123     except FileNotFoundError:
124         install_dotnet()
125 
126     #Перевірка чи встановлений MS SQL Server 
127     try:
128         subprocess.run(["sqlcmd", "-?"], stdout=subprocess.DEVNULL, stderr=subprocess.DEVNULL, check=True)
129         print("SQL Server was found.")
130     except FileNotFoundError:
131         install_sql_server()
132 
133     server = "MYPC"
134     username = "user1"
135     password = getpass.getpass("Enter password: ")
136     db_name = "FarmDb"
137 
138     #Налаштування бази даних
139     db_setup(server, username, password, db_name)
140 
141     #Налаштування appsettings.json
142     change_connect_string(server, username, password, db_name)
143 
144 if __name__ == "__main__":
145     main()
      4
      
      
