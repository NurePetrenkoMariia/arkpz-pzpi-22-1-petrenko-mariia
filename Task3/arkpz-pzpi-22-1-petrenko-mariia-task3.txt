Харківський університет радіоелектроніки
Факультет комп'ютерних наук
Кафедра програмної інженерії



ЗВІТ
до лабораторної роботи № 3
з дисципліни
"Аналіз та рефакторинг коду"
на тему: " РОЗРОБКА БІЗНЕС-ЛОГІКИ ТА ФУНКЦІЙ АДМІНІСТРУВАННЯ СЕРВЕРНОЇ ЧАСТИНИ ПРОГРАМНОЇ СИСТЕМИ"





Виконала ст. гр ПЗПІ-22-1
Петренко Марія Олександрівна

    Перевірив
    ст. викладач кафедри ПІ
    Сокорчук Ігор Петрович






Харків 2024
1 МЕТА
     Розробити бізнес-логіку та функції адміністрування серверної частини  програмної системи. 
2 ЗАВДАННЯ
     Завдання до лабораторної роботи полягає в виконанні наступних пунктів: 
     -	розробити бізнес логіку серверної частини програмної системи;
     -	розробити функції адміністрування серверної частини програмної системи;
     -	створити програмну реалізацію бізнес логіки та функцій адміністрування серверної частини.
3 ХІД РОБОТИ 
	Задачею оптимізації для цього проєкту було обрано автоматичний розподіл завдань ферми між робітниками. Розподіл відбувається за таким принципом: робітники сортуються за кількістю вже існуючих у них завдань, а якщо кількість завдань однакова, то далі сортуються за кількістю завдань з найвищим пріоритетом. Далі для кожного завдання враховується кількість робітників, які необхідні для виконання цього завдання і за принципом кругового обходу, із врахуванням вже призначених завдань, щоб уникнути перевантаження, обираються працівники. Після цього всі значення зберігаються в таблицю UserTasks. Програмний код для цього методу наведений в додатку А.1. 
     Для адміністрування в програмному коді було прописане створення адміністратора бази даних, який має доступ до всіх даних системи та може робити резервне копіювання і відновлення бази даних. Фрагмент програмного коду адміністрування системи наведений в додатку А.2.
     Також була створена UML діаграма діяльності для серверної частини, для функціоналу реєстрації, що наведена на рисунку 1.
     
     Рисунок 1 – UML діаграма діяльності для реєстрації користувача
     
     На рисунку 2 наведена діаграма діяльності для входу в обліковий запис користувача.
     
     Рисунок 2 - UML діаграма діяльності для входу в обліковий запис користувача
     
     Наступна діаграма діяльності, що зображена на рисунку 3, відображає бізнес-логіку розподілу завдань між робітниками ферми.
     
     Рисунок 3 - UML діаграма діяльності для розподілу завдань між робітниками
     
     Діаграма взаємодії для серверної частини наведена на рисунку 4 нижче.
     
     
     Рисунок 4 - UML діаграма взаємодії для серверної частини

ВИСНОВКИ
     В ході виконання лабораторної роботи була розроблена бізнес-логіка та функції адміністрування серверної частини  програмної системи. Для захисту лабораторної роботи було розміщено відео за посиланням: https://youtu.be/AWfAGduk4oU.
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     
ДОДАТОК А
Фрагменти програмного коду 
А.1 Фрагмент програмного коду, що бізнес-логіки серверної частини

1  public async Task<List<UserTask>> AssignTasks(List<User> workers, List<Assignment> assignments)
2  {
3      var userTasks = new List<UserTask>();
4 
5      var sortedWorkers = workers
6          .OrderBy(w => dbContext.UserTasks.Count(ut => ut.UserId == w.Id)) 
7          .ThenBy(w => dbContext.UserTasks.Count(ut => ut.UserId == w.Id && ut.Assignment.Priority == Priority.High)) 
8          .ToList();
9 
10      int workerIndex = 0;
11      var notStartedAssignments = dbContext.UserTasks
12          .Where(ut => ut.Assignment.Status == Status.NotStarted)
13          .ToList();
14 
15      dbContext.UserTasks.RemoveRange(notStartedAssignments);
16      dbContext.SaveChanges();
17      
18      foreach (var assignment in assignments)
19      {
20          var numberOfParticipants = assignment.NumberOfParticipants;
21 
22          var assignedWorkers = new List<User>();
23 
24          for (int i = 0; i < numberOfParticipants; i++)
25          {
26              var worker = sortedWorkers[workerIndex];
27 
28              
29              if (!userTasks.Any(ut => ut.UserId == worker.Id && ut.AssignmentId == assignment.Id))
30              {
31                  assignedWorkers.Add(worker);
32                  userTasks.Add(new UserTask
33                  {
34                      Id = Guid.NewGuid(),
35                      UserId = worker.Id,
36                      AssignmentId = assignment.Id
37                  });
38              }
39 
40              workerIndex = (workerIndex + 1) % sortedWorkers.Count;
41          }
42 
43          if (assignedWorkers.Count < numberOfParticipants)
44          {
45              workerIndex = 0; 
46          }
47      }
48      return userTasks;
49  }

А.2 Фрагмент програмного коду адміністрування серверної частини
1  public async Task<IActionResult> DownloadBackup()
2 {
3     string downloadPath = Path.Combine(
4         Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), 
5         "Downloads" 
6     );
7     if (!Directory.Exists(downloadPath))
8     {
9         return BadRequest("Folder is not found.");
10     }
11 
12     string backupFilePath = Path.Combine(downloadPath, "FarmKeeperDatabaseBackup.bak");
13 
14     try
15     {
16         using (var connection = new SqlConnection(connectionString))
17         {
18             await connection.OpenAsync();
19             string query = $@"
20             BACKUP DATABASE [FarmKeeperDb]
21             TO DISK = @BackupPath
22             WITH FORMAT, INIT;";
23 
24             using (var command = new SqlCommand(query, connection))
25             {
26                 command.Parameters.AddWithValue("@BackupPath", backupFilePath);
27                 await command.ExecuteNonQueryAsync();
28             }
29         }
30 
31         var memoryStream = new MemoryStream(await System.IO.File.ReadAllBytesAsync(backupFilePath));
32         return File(memoryStream, "application/octet-stream", "DatabaseBackup.bak");
33     }
34     catch (Exception ex)
35     {
36         return StatusCode(500, $"Error creating backup: {ex.Message}");
37     }
38 
39 }
40 
41 [HttpPost("restore-database")]
42 [Authorize(Roles = "DatabaseAdmin")]
43 public async Task<IActionResult> RestoreDatabase(IFormFile backupFile)
44 {
45     if (backupFile == null || backupFile.Length == 0)
46     {
47         return BadRequest("Error! File was not found or empty.");
48     }
49 
50 
51     string filePath = @"C:\Users\Мария\Downloads\FarmKeeperDatabaseBackup.bak";
52 
53     try
54     {
55         using (var stream = new FileStream(filePath, FileMode.Create))
56         {
57             await backupFile.CopyToAsync(stream);
58         }
59         string query = $@" USE master;
60             ALTER DATABASE [FarmKeeperDb] SET SINGLE_USER WITH ROLLBACK IMMEDIATE;
61             RESTORE DATABASE [FarmKeeperDb]
62             FROM DISK = @BackupPath
63             WITH REPLACE;
64             ALTER DATABASE [FarmKeeperDb] SET MULTI_USER;";
65 
66         using (var connection = new SqlConnection(connectionString))
67         {
68             await connection.OpenAsync();
69 
70             using (var command = new SqlCommand(query, connection))
71             {
72                 command.Parameters.AddWithValue("@BackupPath", filePath);
73                 await command.ExecuteNonQueryAsync();
74             }
75         }
76 
77         return Ok("Database restored successfully.");
78     }
79     catch (Exception ex)
80     {
81         return StatusCode(500, $"Error restoring database: {ex.Message}");
82     }
83 }
      8
      
      
